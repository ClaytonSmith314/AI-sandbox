
This is the playground for my AI research

Basic premise: All information can be encoded, at least implicitly, as an arrangement of symbols.
Computer use a set of one's and zero's to store information at the lowest level, but it is most useful to view
the information stored on a computer as a STRING. A string is simply an arrangement of 'characters' from a beginning to
end of an undefined length. Since strings have an indefinite number of configurations, they
can hold an indefinite amount of information, and therefor can have an indefinably variable meaning.

The goal here is to understand how to create a program that given information and time can build a system of strings
and methods that will allow it to understand and respond to stimuli given to it in a proactive manner.
I intend to prove that complex systems capable of understanding and manipulating other complex systems can be
created on any machine that can produce 'strings' and 'methods'. I also intend to provide a set of virtual tools and
concepts needed to build and understand such a system, and of course, to create such a system myself.

This project is in all a work of science, a work of engineering, a work of art, and a work of philosophy.
This may be one of the only things that can be all of these. I expect no less than that this idea, whether realized by
myself or by someone else, will shake the world when realised. I must admit that such a though is one of the main
ideas driving me to create this work. The very idea of it -that something so complex and dynamic can be created with
the most ridged of tools- fascinates me and I can't help but finding the answer to this question. This may be my own
version of Pandora's box, and it is by my curiosity that I have found out how to open it, but this idea makes me even
more driven to get it open. To leave it unopened would leave me with a idea unresolved, and a truth -for this would
only be a reveling of truth- lain dormant left to be discovered some other time.

These are the ideas that contextualise the building of this project. I just want to spend a little more time to explain
my choice of programming language and title for the project. I originally wanted to do this project in Java. Java is
a good language, especially for staying organized and understanding the importance data has in the code, but it lacked
the flexibility needed to do this project well. The main reason why I chose Java first was because I knew it. That's
the language I learned in school, and so it made sense to start with what I knew. But as I thought about it more, I
realized that python was the more logical choice. The twin project to "Tom Riddle", one I'm working on with a good
friend of mine, is to 3-D print a small bi-pedal robot, dubbed "Andrew", using a raspberry pi. Since we are using
python for that project, it makes sense to use it here as well. It's also helpful that I don't know python very very
well. If I knew it too well, I'd have to break my understanding to introduce new concepts into the code. However, since
I don't know the language very well yet, I can grow both my understanding of the language and my understanding of the
concepts together as I work on it. As for the name, "Tom Riddle": it refers to Harry Potter book two, when Harry finds
the book that responded to his writing with it's own text ink and introduced itself as "Tom Riddle". A book is a place
for storing strings of information, and that book produced from those strings something more. Now that I have all this
extra time from the COVID-19 quarantine, I have time to work on this. This is the beginning.

Clayton Smith - 3/14/2020

-----------------------

4/10/2020

I have spent a lot of time working with python. I have learned a lot. I'm just starting to get to the part of the code
where everything comes together, althouh this happened a little later that I expected. I expect for this to take a
while to get it to the state that I want it to be. I will need time to put all my ideas together. The thing is, I can
see what I need to be coding any time I get on. Right now, I'm working with getting context setup. I'm built a
recursive method that loops through all symbols in the echo context and calls some action from them, which action
will be defined in a heap dictionary. My goal is to setup the heap so that the program itself will be able to define
the symbols that go inside it. This requires a record state that can create a list of all the actions done by the
context, and a program that can create cycles from the record state. The heap will have to be saved to and loaded from
file every time the AI starts and ends. This also assumes that the context will already know what to do before it
starts. One of the big ideas that's been floating around in my mind is to start the context with a lesson on what the
context is. Basicly, it will first learn about itself, then use itself to extract implicate information from its own
opperation. This is another big idea that I've been thinking about. All information has both implicate and explicate
meaning, and this has heavy implications in the contruction of the AI. The first thing is that we can search for symbols
and expressions that arn't explicitly encoded into memory. Searching for symbols without knowing the answer right away
can be called an implicate search. A good example of this is remebering the location of something. We first take an
explicate object, and try to find an implicate state of that object. We first look in memory. If we have an explicate
memory of placing the object somewhere, we can just use that and be done. If we don't have an explicate memory though,
we must find other ways. At this point, the location of the object is indeterminate, meaning we can't figure out what
it is. The next step is quantification. This is the act of limiting the location of the object to a certain range of
values. If an object has an explicite state, then that state is encoded into the computer directly. If an object has
an implicate state, than the state is not encoded directly into the computer. If the object has an indeterminate state,
meaning it's exact state is unknown, then it must have a quantum state. I will have to work out how expressions,
quantum states, and explicate states will be represented on the computer. The one thing I have to make sure of though
is that I can have computer defined symbols and computer defined actions. I shouldn't be able to predict what will
happen in the system past the first couple of cycles.

---------------------------

4/14/2020

This is the cycle that creates inteligence
These four data structures will be used at the symbol level
    1.  Heap
    2.  Context
    3.  data
    4.  record

Here's the Learning Cycle
    1. (Heap -> Context)            INITIATE action set in context from heap
    2. (Context -> Data)    EFECTUATE action set generating data
    3. (Context & Data -> Record)    RECORD all actions done by the context and reaulting data from actions
    4. (Record -> Heap)     Create a new symbol and DEFINE it from the record

This is not the whole picture, but it is the foundation. It gives me something to test in code. It also fits with the
learning process I know for myself. When Practicing, I read the music, creating a stream of actions to run. When I run
the actions in order, I get sensations and confermations or alerts about whether I'm doing it correctly. The things I
practice then get stored in memory, as a cycle with a referance symbol I can call to run it. This allows me to play the
piece again, without my music. Each part I practice gets a symbol, which then gets added as a stage of the whole piece.

The other thing this cycle does is it means that the AI program will always have something to do. Since the cycle is
circular preparing itself for it's next revolution, the program will never go completly static. My hope is to setup a
function scheme that can run the learning cycle. This will probibly involve lower level data structures to keep track
of where different parts of the cycle need to happen